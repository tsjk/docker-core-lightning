From e8cc2802b190e38dbf2461afc56ae0d6ee06ace0 Mon Sep 17 00:00:00 2001
From: Se7enZ <se7enZ@protonmail.com>
Date: Mon, 21 Oct 2024 16:58:14 +0200
Subject: [PATCH 1/3] boltz: Validate initial claim destination address.

---
 Boltz/Detail/ClaimTxHandler.cpp | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/Boltz/Detail/ClaimTxHandler.cpp b/Boltz/Detail/ClaimTxHandler.cpp
index b5a5fd67e..cee447f05 100644
--- a/Boltz/Detail/ClaimTxHandler.cpp
+++ b/Boltz/Detail/ClaimTxHandler.cpp
@@ -50,7 +50,7 @@ Ev::Io<void> ClaimTxHandler::core_run() {
 	}).then([this](Sqlite3::Tx tx) {
 		/* First do a quick check.  */
 		auto check1 = tx.query(R"QRY(
-		SELECT lockedUp, timeoutBlockheight
+		SELECT lockedUp, timeoutBlockheight, destinationAddress
 		  FROM "BoltzServiceFactory_rsub"
 		 WHERE apiAccess = :apiAccess
 		   AND swapId = :swapId
@@ -65,6 +65,7 @@ Ev::Io<void> ClaimTxHandler::core_run() {
 			++found;
 			lockedUp = r.get<bool>(0);
 			timeoutBlockheight = r.get<std::uint32_t>(1);
+			destinationAddress = r.get<std::string>(2);
 			break;
 		}
 		if (found == 0) {
@@ -89,6 +90,14 @@ Ev::Io<void> ClaimTxHandler::core_run() {
 				return Ev::lift();
 			});
 		}
+		if (destinationAddress.empty()) {
+			return loge("Swap destination address is empty??"
+				   ).then([]() {
+				throw End();
+				return Ev::lift();
+			});
+		}
+		// TODO: Check for validity of destination address?
 
 		/* Perform the actual fetch of the data.  */
 		auto fetch = tx.query(R"QRY(

From 4c7a5f2160bff334055a4b60d2445c5f82ad9de0 Mon Sep 17 00:00:00 2001
From: Se7enZ <se7enZ@protonmail.com>
Date: Fri, 25 Oct 2024 14:32:34 +0200
Subject: [PATCH 2/3] swaps: Don't insert into or select empty addresses from
 cache.

---
 Boss/Mod/SwapManager.cpp | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/Boss/Mod/SwapManager.cpp b/Boss/Mod/SwapManager.cpp
index 22467a9c1..f4a7b5c91 100644
--- a/Boss/Mod/SwapManager.cpp
+++ b/Boss/Mod/SwapManager.cpp
@@ -280,6 +280,8 @@ class SwapManager::Impl {
 			/* First, try to get an address from the addrcache.  */
 			auto check = tx.query(R"QRY(
 			SELECT id, address FROM "SwapManager_addrcache"
+                         WHERE address IS NOT NULL
+                          AND address <> ''
 			 ORDER BY id
 			 LIMIT 1
 			     ;
@@ -626,12 +628,14 @@ class SwapManager::Impl {
 		auto address = std::string();
 		for (auto& r : fetch)
 			address = r.get<std::string>(0);
-		tx.query(R"QRY(
-		INSERT INTO "SwapManager_addrcache"
-		VALUES(NULL, :address);
-		)QRY")
-			.bind(":address", address)
-			.execute();
+		if (!address.empty()) {
+			tx.query(R"QRY(
+		        INSERT INTO "SwapManager_addrcache"
+		        VALUES(NULL, :address);
+		        )QRY")
+				.bind(":address", address)
+				.execute();
+		}
 
 		/* Delete the swap itself.  */
 		tx.query(R"QRY(

From 48a6ec24cce03279d10e66f03a49cd8c3895416c Mon Sep 17 00:00:00 2001
From: Se7enZ <se7enZ@protonmail.com>
Date: Fri, 25 Oct 2024 15:35:16 +0200
Subject: [PATCH 3/3] swaps: Init SQL query to remove blank addresses from
 cache.

---
 Boss/Mod/SwapManager.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/Boss/Mod/SwapManager.cpp b/Boss/Mod/SwapManager.cpp
index f4a7b5c91..5fca0c6ef 100644
--- a/Boss/Mod/SwapManager.cpp
+++ b/Boss/Mod/SwapManager.cpp
@@ -191,6 +191,12 @@ class SwapManager::Impl {
 			     ( payment_hash TEXT UNIQUE
 			     , amount_sent INTEGER NOT NULL
 			     );
+
+			-- Sanity check to remove erroneous blank addresses
+			-- from the address cache.
+			DELETE FROM SwapManager_addrcache
+			 WHERE address IS NULL
+			  OR address = '';
 			)QRY");
 			tx.commit();
 
